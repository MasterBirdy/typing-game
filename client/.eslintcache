[{"/home/masterbirdy/reactSandbox/typing-game/client/src/App.tsx":"1","/home/masterbirdy/reactSandbox/typing-game/client/src/index.tsx":"2","/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Home.tsx":"3","/home/masterbirdy/reactSandbox/typing-game/client/src/context/SocketContext.tsx":"4","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/index.ts":"5","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/utilities/Breakpoints.ts":"6","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Container.ts":"7","/home/masterbirdy/reactSandbox/typing-game/client/src/store.ts":"8","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/userConstants.ts":"9","/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/usersReducers.ts":"10","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/socketConstants.ts":"11","/home/masterbirdy/reactSandbox/typing-game/client/src/actions/userActions.ts":"12","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/statusConstants.ts":"13","/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/statusReducers.ts":"14","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/messageConstants.ts":"15","/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/messageReducers.ts":"16","/home/masterbirdy/reactSandbox/typing-game/client/src/components/Message.tsx":"17","/home/masterbirdy/reactSandbox/typing-game/client/src/components/NavBar.tsx":"18","/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Game.tsx":"19","/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/gameReducers.ts":"20","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/gameConstants.ts":"21","/home/masterbirdy/reactSandbox/typing-game/client/src/actions/gameActions.ts":"22","/home/masterbirdy/reactSandbox/typing-game/client/src/components/ProtectedRoute.tsx":"23","/home/masterbirdy/reactSandbox/typing-game/client/src/components/StatusRenderComponent.tsx":"24","/home/masterbirdy/reactSandbox/typing-game/client/src/actions/statusActions.ts":"25","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/utilities/index.ts":"26","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Message.ts":"27","/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Users.tsx":"28","/home/masterbirdy/reactSandbox/typing-game/client/src/components/PlayerCard.tsx":"29","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Grid.ts":"30","/home/masterbirdy/reactSandbox/typing-game/client/src/components/MessageWrapper.tsx":"31","/home/masterbirdy/reactSandbox/typing-game/client/src/actions/messageActions.ts":"32","/home/masterbirdy/reactSandbox/typing-game/client/src/components/UserVersusCard.tsx":"33"},{"size":1341,"mtime":1606888542329,"results":"34","hashOfConfig":"35"},{"size":296,"mtime":1606377860814,"results":"36","hashOfConfig":"35"},{"size":2816,"mtime":1606901604197,"results":"37","hashOfConfig":"35"},{"size":5800,"mtime":1606913284624,"results":"38","hashOfConfig":"35"},{"size":80,"mtime":1606606804973,"results":"39","hashOfConfig":"35"},{"size":689,"mtime":1606606098476,"results":"40","hashOfConfig":"35"},{"size":437,"mtime":1606608753381,"results":"41","hashOfConfig":"35"},{"size":1550,"mtime":1606458841838,"results":"42","hashOfConfig":"35"},{"size":601,"mtime":1606614261138,"results":"43","hashOfConfig":"35"},{"size":1045,"mtime":1606614027411,"results":"44","hashOfConfig":"35"},{"size":735,"mtime":1606902520105,"results":"45","hashOfConfig":"35"},{"size":534,"mtime":1606613137082,"results":"46","hashOfConfig":"35"},{"size":1062,"mtime":1606913029144,"results":"47","hashOfConfig":"35"},{"size":1551,"mtime":1606896947257,"results":"48","hashOfConfig":"35"},{"size":905,"mtime":1606874799289,"results":"49","hashOfConfig":"35"},{"size":1477,"mtime":1606887940095,"results":"50","hashOfConfig":"35"},{"size":935,"mtime":1606876931493,"results":"51","hashOfConfig":"35"},{"size":1681,"mtime":1606913896478,"results":"52","hashOfConfig":"35"},{"size":5274,"mtime":1606890593458,"results":"53","hashOfConfig":"35"},{"size":2967,"mtime":1606875254547,"results":"54","hashOfConfig":"35"},{"size":1551,"mtime":1606874395526,"results":"55","hashOfConfig":"35"},{"size":1867,"mtime":1606874429146,"results":"56","hashOfConfig":"35"},{"size":395,"mtime":1606463069617,"results":"57","hashOfConfig":"35"},{"size":491,"mtime":1606460491841,"results":"58","hashOfConfig":"35"},{"size":1085,"mtime":1606912957213,"results":"59","hashOfConfig":"35"},{"size":31,"mtime":1606361023366,"results":"60","hashOfConfig":"35"},{"size":194,"mtime":1606383386489,"results":"61","hashOfConfig":"35"},{"size":3282,"mtime":1606913875658,"results":"62","hashOfConfig":"35"},{"size":2109,"mtime":1606913825830,"results":"63","hashOfConfig":"35"},{"size":847,"mtime":1606901741288,"results":"64","hashOfConfig":"35"},{"size":1986,"mtime":1606901955063,"results":"65","hashOfConfig":"35"},{"size":942,"mtime":1606874829309,"results":"66","hashOfConfig":"35"},{"size":1061,"mtime":1606867653215,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"ylj7ul",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"73"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"73"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"73"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"/home/masterbirdy/reactSandbox/typing-game/client/src/App.tsx",[],["144","145"],"/home/masterbirdy/reactSandbox/typing-game/client/src/index.tsx",[],["146","147"],"/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Home.tsx",["148","149"],"/home/masterbirdy/reactSandbox/typing-game/client/src/context/SocketContext.tsx",["150"],"import React, { useEffect, createContext } from \"react\";\nimport io from \"socket.io-client\";\nimport { addUser, deleteUser, setUsersList } from \"../actions/userActions\";\nimport { changeStatus, challengeUser, getChallenged, setID, setName, resetOpponent } from \"../actions/statusActions\";\nimport {\n    typeCharacter,\n    updateOpponentGameData,\n    updateTimeGame,\n    gameStart,\n    gameWon,\n    stopGame,\n} from \"../actions/gameActions\";\nimport { setMessage, createMessageWithAction, resetAllMessage, setError } from \"../actions/messageActions\";\nimport { Status } from \"../constants/statusConstants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { User } from \"../constants/userConstants\";\nimport { socketConstants } from \"../constants/socketConstants\";\nimport { useHistory } from \"react-router-dom\";\nimport { ApplicationState } from \"../store\";\nimport { OpponentData } from \"../constants/gameConstants\";\nconst socket = io(\"http://localhost:5000\");\n\nexport interface SocketContextInterface {\n    id: string;\n    challenge: (s: User) => void;\n    acceptInvite: (s: string) => void;\n    typeACharacter: (s: string) => void;\n    updateGame: (s: string) => void;\n    setMyName: (s: string) => void;\n    leaveGame: () => void;\n}\n\nexport const SocketContext = createContext<SocketContextInterface | null>(null);\n\ninterface SocketProviderInterface {\n    children: React.ReactNode;\n}\n\nconst {\n    USERS_LIST,\n    ADD_USER,\n    DELETE_USER,\n    CHALLENGE_USER,\n    SET_ID,\n    CHANGE_NAME,\n    SET_NAME,\n    SET_STATUS,\n    USER_CHALLENGED,\n    ACCEPT_CHALLENGE,\n    CANCEL_CHALLENGE,\n    START_GAME,\n    UPDATE_GAME,\n    GAME_UPDATED,\n    GAME_WON,\n    TYPE_CHARACTER,\n    OPPONENT_LEFT,\n    OPPONENT_DISCONNECTED,\n} = socketConstants;\n\nexport const SocketProvider = ({ children }: SocketProviderInterface) => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const gameState = useSelector((state: ApplicationState) => state.game);\n    const { typingPrompt, yourActions } = gameState;\n    useEffect(() => {\n        socket.on(SET_ID, (data: string) => {\n            dispatch(setID(data));\n        });\n\n        socket.on(SET_NAME, (data: string) => {\n            dispatch(setName(data));\n        });\n\n        socket.on(USERS_LIST, (data: { [key: string]: User }) => {\n            dispatch(setUsersList(data));\n        });\n\n        socket.on(ADD_USER, (data: User) => {\n            dispatch(addUser(data));\n        });\n\n        socket.on(DELETE_USER, (data: string) => {\n            dispatch(deleteUser(data));\n        });\n\n        socket.on(USER_CHALLENGED, (data: User) => {\n            dispatch(getChallenged(data));\n            dispatch(\n                createMessageWithAction(`${data.name} has challenged you to a fight!`, {\n                    name: \"Accept\",\n                    onClick: () => {\n                        acceptInvite(data.id);\n                    },\n                })\n            );\n        });\n\n        socket.on(SET_STATUS, (data: Status) => {\n            dispatch(changeStatus(data));\n        });\n\n        socket.on(GAME_UPDATED, (data: OpponentData) => {\n            dispatch(updateOpponentGameData(data));\n        });\n\n        socket.on(START_GAME, (time: number, prompt: string) => {\n            dispatch(changeStatus(Status.PLAYING));\n            dispatch(resetAllMessage());\n            dispatch(gameStart(time, prompt));\n            history.push(\"/game\");\n        });\n\n        socket.on(GAME_WON, (winner: string) => {\n            dispatch(gameWon(winner === socket.id));\n            dispatch(\n                createMessageWithAction(`Game has finished! Click here to leave the room.`, {\n                    name: \"Leave\",\n                    onClick: () => {\n                        history.push(\"/\");\n                        dispatch(resetAllMessage());\n                    },\n                })\n            );\n        });\n\n        socket.on(OPPONENT_DISCONNECTED, (message: string) => {\n            dispatch(stopGame());\n            dispatch(resetOpponent());\n            dispatch(setMessage(\"\"));\n            dispatch(setError(message));\n        });\n    }, [history]);\n\n    const challenge = (opponent: User) => {\n        socket.emit(CHALLENGE_USER, opponent.id);\n        dispatch(challengeUser(opponent));\n        dispatch(\n            createMessageWithAction(`You have challenged ${opponent.name} to a fight!`, {\n                name: \"Cancel\",\n                onClick: () => {\n                    dispatch(setMessage(\"\"));\n                    socket.emit(CANCEL_CHALLENGE);\n                },\n            })\n        );\n    };\n\n    const acceptInvite = (opponent: string) => {\n        socket.emit(ACCEPT_CHALLENGE, opponent);\n        dispatch(resetAllMessage());\n    };\n\n    const typeACharacter = (typedString: string) => {\n        socket.emit(TYPE_CHARACTER, typedString, yourActions);\n        dispatch(typeCharacter(typedString, typingPrompt));\n    };\n\n    const updateGame = (opponent: string) => {\n        socket.emit(UPDATE_GAME, opponent);\n        dispatch(updateTimeGame());\n    };\n\n    const leaveGame = () => {\n        socket.emit(OPPONENT_LEFT);\n        dispatch(stopGame());\n        dispatch(resetOpponent());\n    };\n\n    const setMyName = (name: string) => {\n        socket.emit(CHANGE_NAME, name);\n        dispatch(setName(name));\n        dispatch(\n            createMessageWithAction(`Name changed to ${name}.`, {\n                name: \"Accept\",\n                onClick: () => {\n                    dispatch(setMessage(\"\"));\n                },\n            })\n        );\n    };\n\n    return (\n        <SocketContext.Provider\n            value={{ id: socket.id, challenge, acceptInvite, typeACharacter, updateGame, setMyName, leaveGame }}\n        >\n            {children}\n        </SocketContext.Provider>\n    );\n};\n","/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/index.ts",[],["151","152"],"/home/masterbirdy/reactSandbox/typing-game/client/src/elements/utilities/Breakpoints.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Container.ts",[],["153","154"],"/home/masterbirdy/reactSandbox/typing-game/client/src/store.ts",[],["155","156"],"/home/masterbirdy/reactSandbox/typing-game/client/src/constants/userConstants.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/usersReducers.ts",["157"],"import { stat } from \"fs\";\nimport { ADD_USER, DELETE_USER, SET_USERS_LIST, UserActionTypes, User } from \"../constants/userConstants\";\n\nexport interface UserStateInterface {\n    users: { [key: string]: User };\n}\n\nexport const initialState: UserStateInterface = {\n    users: {},\n};\n\nexport const usersReducer = (state = initialState, action: UserActionTypes): UserStateInterface => {\n    switch (action.type) {\n        case SET_USERS_LIST:\n            return {\n                users: action.payload,\n            };\n        case ADD_USER:\n            const user = action.payload;\n            const newUsers = { ...state.users };\n            newUsers[user.id] = { ...user };\n            return {\n                ...state,\n                users: newUsers,\n            };\n        case DELETE_USER:\n            const deletedUsers = { ...state.users };\n            delete deletedUsers[action.payload];\n            return {\n                ...state,\n                users: deletedUsers,\n            };\n        default:\n            return state;\n    }\n};\n","/home/masterbirdy/reactSandbox/typing-game/client/src/constants/socketConstants.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/actions/userActions.ts",[],["158","159"],"/home/masterbirdy/reactSandbox/typing-game/client/src/constants/statusConstants.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/statusReducers.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/constants/messageConstants.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/messageReducers.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/Message.tsx",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/NavBar.tsx",["160"],"/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Game.tsx",["161","162"],"import React, { useContext, useRef, useEffect, useMemo } from \"react\";\nimport { SocketContext } from \"../context/SocketContext\";\nimport styled from \"styled-components\";\nimport { Container } from \"../elements/components\";\nimport { below } from \"../elements/utilities\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ApplicationState } from \"../store\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport UserVersusCard from \"../components/UserVersusCard\";\nimport { incrementActionCounter } from \"../actions/gameActions\";\nimport { Prompt } from \"react-router-dom\";\n\nexport interface GameProps {}\n\nconst Game: React.FC<GameProps> = () => {\n    const intervalRef = useRef(0);\n    const dispatch = useDispatch();\n    const statusState = useSelector((state: ApplicationState) => state.status);\n    const { opponent, id } = statusState;\n    const gameState = useSelector((state: ApplicationState) => state.game);\n    const context = useContext(SocketContext);\n    const {\n        typingPrompt,\n        yourTyping,\n        sliceNumber,\n        incorrect,\n        yourActions,\n        opponentActions,\n        opponentTyping,\n        timeStarted,\n        currentTime,\n        gameWon,\n        youWon,\n    } = gameState;\n    let slice = 0;\n    let prompt = [];\n    if (sliceNumber > 0) {\n        prompt.push(<GreenSpan>{typingPrompt.slice(0, sliceNumber)}</GreenSpan>);\n        slice += sliceNumber;\n    }\n    if (incorrect && sliceNumber !== typingPrompt.length) {\n        prompt.push(<RedSpan>{typingPrompt.slice(slice, slice + 1)}</RedSpan>);\n        slice++;\n    }\n    prompt.push(typingPrompt.slice(slice));\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (opponent) {\n                context?.updateGame(opponent.id);\n            }\n        }, 700);\n        intervalRef.current = interval;\n        return () => {\n            clearInterval(intervalRef.current);\n            context?.leaveGame();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (intervalRef.current && gameWon) {\n            clearInterval(intervalRef.current);\n        }\n    }, [intervalRef, gameWon]);\n\n    let calculatedNumbers = useMemo(() => {\n        return {\n            you: Math.floor(yourActions / 5 / ((currentTime - timeStarted) / (1000 * 60))),\n            opponent: Math.floor(opponentActions / 5 / ((currentTime - timeStarted) / (1000 * 60))),\n            yourPercentage: Math.min(Math.floor((yourTyping.length / typingPrompt.length) * 100), 100),\n            opponentPercentage: Math.min(Math.floor((opponentTyping.length / typingPrompt.length) * 100), 100),\n        };\n    }, [currentTime]);\n\n    return (\n        <GameContainer>\n            <Prompt when={!gameWon} message={() => \"Your game is still being played! Are you sure you want to quit?\"} />\n            <Flex>\n                <UserVersusCard\n                    name={\"You\"}\n                    user={id}\n                    apm={calculatedNumbers.you}\n                    percent={gameWon && youWon ? 100 : calculatedNumbers.yourPercentage}\n                    winner={gameWon && youWon}\n                />\n                <UserVersusCard\n                    name={opponent?.name}\n                    user={opponent?.id}\n                    apm={calculatedNumbers.opponent}\n                    percent={gameWon && !youWon ? 100 : calculatedNumbers.opponentPercentage}\n                    winner={gameWon && !youWon}\n                />\n            </Flex>\n            <TypingHeader>Typing Prompt</TypingHeader>\n            <TypingPrompt>{prompt}</TypingPrompt>\n            <TextInput\n                onPaste={(e: React.ClipboardEvent) => {\n                    e.preventDefault();\n                }}\n                onContextMenu={(e: React.MouseEvent) => e.preventDefault()}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.keyCode === 13) e.preventDefault();\n                    else {\n                        if (e.keyCode !== 8) {\n                            dispatch(incrementActionCounter());\n                        }\n                    }\n                }}\n                value={yourTyping}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    context?.typeACharacter(e.target.value);\n                }}\n                disabled={gameWon}\n            />\n        </GameContainer>\n    );\n};\n\nconst GameContainer = styled(Container)`\n    margin-top: 1.25rem;\n`;\n\nconst Flex = styled.div`\n    display: flex;\n`;\n\nconst TypingHeader = styled.p`\n    font-family: Lato;\n    font-size: 1.3rem;\n    font-weight: 700;\n    color: #333;\n    margin-top: 1.25rem;\n    margin-bottom: 0.5rem;\n`;\n\nconst TypingPrompt = styled.span`\n    font-family: Crimson Text;\n    font-size: 2.3rem;\n    user-select: none;\n    ${below.s`\n    font-size: 1.5rem;\n    `}\n    ${below.xs`\n    font-size: 1.3rem;\n    `}\n`;\n\nconst GreenSpan = styled.span`\n    background-color: #aedcb8;\n`;\n\nconst RedSpan = styled.span`\n    background-color: #f1aeae;\n`;\n\nconst TextInput = styled(TextareaAutosize)`\n    margin-top: 1rem;\n    display: block;\n    width: 100%;\n    font-family: Lato;\n    padding: 1rem 1.25rem 2rem;\n    font-size: 1.15rem;\n    outline: none;\n    resize: none;\n    user-select: none;\n`;\n\nexport default Game;\n","/home/masterbirdy/reactSandbox/typing-game/client/src/reducers/gameReducers.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/constants/gameConstants.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/actions/gameActions.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/ProtectedRoute.tsx",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/StatusRenderComponent.tsx",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/actions/statusActions.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/elements/utilities/index.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Message.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/pages/Users.tsx",["163"],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/PlayerCard.tsx",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/elements/components/Grid.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/MessageWrapper.tsx",["164"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { ApplicationState } from \"../store\";\nimport Message, { messageType } from \"./Message\";\nimport { below } from \"../elements/utilities\";\nimport { resetError } from \"../actions/messageActions\";\n\nexport interface MessageWrapperProps {}\n\nconst MessageWrapper: React.FC<MessageWrapperProps> = () => {\n    const dispatch = useDispatch();\n    const messageState = useSelector((state: ApplicationState) => state.message);\n    const { message, error, button, errorOnClick } = messageState;\n\n    return (\n        <Wrapper>\n            {message && (\n                <Message>\n                    {message}\n                    {button.name && <Button onClick={(e: React.MouseEvent) => button.onClick(e)}>{button.name}</Button>}\n                </Message>\n            )}\n            {error && (\n                <Message type={messageType.error}>\n                    {error}\n                    <Button typeProp={messageType.error} onClick={(e: React.MouseEvent) => dispatch(resetError())}>\n                        Accept\n                    </Button>\n                </Message>\n            )}\n        </Wrapper>\n    );\n};\n\nconst Wrapper = styled.div`\n    position: fixed;\n    margin: 0 auto;\n    min-width: 40rem;\n    bottom: 1rem;\n    left: 50%;\n    transform: translateX(-50%);\n    ${below.s`\n        min-width: 80%;\n    `}\n`;\n\nconst Button = styled.button<{ typeProp?: messageType }>`\n    border-style: solid;\n    border-width: 2px;\n    border-radius: 5px;\n    border-color: ${(props) => (props.typeProp && props.typeProp === messageType.error ? \"#af8489\" : \"#d1d1d1\")};\n    background-color: ${(props) => (props.typeProp && props.typeProp === messageType.error ? \"#e0bdc1\" : \"#f0f0f0\")};\n    font-family: Lato, sans-serif;\n    color: #292c2e;\n    padding: 0.66rem;\n    cursor: pointer;\n    outline: none;\n    margin-left: 0.33rem;\n`;\n\nexport default MessageWrapper;\n","/home/masterbirdy/reactSandbox/typing-game/client/src/actions/messageActions.ts",[],"/home/masterbirdy/reactSandbox/typing-game/client/src/components/UserVersusCard.tsx",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"165","replacedBy":"169"},{"ruleId":"167","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":19},{"ruleId":"171","severity":1,"message":"175","line":6,"column":10,"nodeType":"173","messageId":"174","endLine":6,"endColumn":16},{"ruleId":"176","severity":1,"message":"177","line":132,"column":8,"nodeType":"178","endLine":132,"endColumn":17,"suggestions":"179"},{"ruleId":"165","replacedBy":"180"},{"ruleId":"167","replacedBy":"181"},{"ruleId":"165","replacedBy":"182"},{"ruleId":"167","replacedBy":"183"},{"ruleId":"165","replacedBy":"184"},{"ruleId":"167","replacedBy":"185"},{"ruleId":"171","severity":1,"message":"186","line":1,"column":10,"nodeType":"173","messageId":"174","endLine":1,"endColumn":14},{"ruleId":"165","replacedBy":"187"},{"ruleId":"167","replacedBy":"188"},{"ruleId":"171","severity":1,"message":"189","line":5,"column":10,"nodeType":"173","messageId":"174","endLine":5,"endColumn":15},{"ruleId":"176","severity":1,"message":"190","line":58,"column":8,"nodeType":"178","endLine":58,"endColumn":10,"suggestions":"191"},{"ruleId":"176","severity":1,"message":"192","line":73,"column":8,"nodeType":"178","endLine":73,"endColumn":21,"suggestions":"193"},{"ruleId":"171","severity":1,"message":"194","line":3,"column":23,"nodeType":"173","messageId":"174","endLine":3,"endColumn":34},{"ruleId":"171","severity":1,"message":"195","line":14,"column":37,"nodeType":"173","messageId":"174","endLine":14,"endColumn":49},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],["196"],["197"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Status' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'acceptInvite' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["198"],["196"],["197"],["196"],["197"],["196"],["197"],"'stat' is defined but never used.",["196"],["197"],"'below' is defined but never used.","React Hook useEffect has missing dependencies: 'context' and 'opponent'. Either include them or remove the dependency array.",["199"],"React Hook useMemo has missing dependencies: 'opponentActions', 'opponentTyping.length', 'timeStarted', 'typingPrompt.length', 'yourActions', and 'yourTyping.length'. Either include them or remove the dependency array.",["200"],"'useDispatch' is defined but never used.","'errorOnClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [acceptInvite, dispatch, history]",{"range":"207","text":"208"},"Update the dependencies array to be: [context, opponent]",{"range":"209","text":"210"},"Update the dependencies array to be: [currentTime, opponentActions, opponentTyping.length, timeStarted, typingPrompt.length, yourActions, yourTyping.length]",{"range":"211","text":"212"},[4127,4136],"[acceptInvite, dispatch, history]",[1972,1974],"[context, opponent]",[2625,2638],"[currentTime, opponentActions, opponentTyping.length, timeStarted, typingPrompt.length, yourActions, yourTyping.length]"]